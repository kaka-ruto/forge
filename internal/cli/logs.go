package cli

import (
	"fmt"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/spf13/cobra"
)

// NewLogsCommand creates the logs command
func NewLogsCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "logs",
		Short: "View and manage Forge OS logs",
		Long:  `View, filter, and manage log files generated by Forge OS operations.`,
		RunE:  runLogsCommandE,
	}

	cmd.Flags().StringP("level", "l", "", "Filter by log level (debug, info, warn, error)")
	cmd.Flags().StringP("component", "c", "", "Filter by component")
	cmd.Flags().BoolP("follow", "f", false, "Follow log output")
	cmd.Flags().IntP("tail", "n", 50, "Number of lines to show")

	return cmd
}

func runLogsCommandE(cmd *cobra.Command, args []string) error {
	level, _ := cmd.Flags().GetString("level")
	component, _ := cmd.Flags().GetString("component")
	follow, _ := cmd.Flags().GetBool("follow")
	tail, _ := cmd.Flags().GetInt("tail")

	return runLogsCommand(args, map[string]interface{}{
		"level":     level,
		"component": component,
		"follow":    follow,
		"tail":      tail,
	})
}

func runLogsCommand(args []string, flags map[string]interface{}) error {
	// Find log files
	logFiles, err := findLogFiles()
	if err != nil {
		return fmt.Errorf("failed to find log files: %v", err)
	}

	if len(logFiles) == 0 {
		fmt.Println("No log files found.")
		return nil
	}

	// For now, just show the most recent log file
	sort.Strings(logFiles)
	latestLog := logFiles[len(logFiles)-1]

	fmt.Printf("Showing logs from: %s\n", latestLog)
	fmt.Println(strings.Repeat("=", 50))

	content, err := os.ReadFile(latestLog)
	if err != nil {
		return fmt.Errorf("failed to read log file: %v", err)
	}

	lines := strings.Split(string(content), "\n")

	// Apply filters
	filteredLines := filterLogLines(lines, flags)

	// Apply tail limit
	if len(filteredLines) > flags["tail"].(int) {
		start := len(filteredLines) - flags["tail"].(int)
		filteredLines = filteredLines[start:]
	}

	// Print lines
	for _, line := range filteredLines {
		if line != "" {
			fmt.Println(line)
		}
	}

	return nil
}

func findLogFiles() ([]string, error) {
	var logFiles []string

	// Check for forge.log in current directory
	if _, err := os.Stat("forge.log"); err == nil {
		logFiles = append(logFiles, "forge.log")
	}

	// Check for .forge/logs directory
	logDir := ".forge/logs"
	if _, err := os.Stat(logDir); err == nil {
		entries, err := os.ReadDir(logDir)
		if err == nil {
			for _, entry := range entries {
				if strings.HasSuffix(entry.Name(), ".log") {
					logFiles = append(logFiles, filepath.Join(logDir, entry.Name()))
				}
			}
		}
	}

	return logFiles, nil
}

func filterLogLines(lines []string, flags map[string]interface{}) []string {
	var filtered []string

	level := strings.ToUpper(flags["level"].(string))
	component := flags["component"].(string)

	for _, line := range lines {
		if line == "" {
			continue
		}

		// Filter by level
		if level != "" {
			if !strings.Contains(strings.ToUpper(line), "["+level+"]") {
				continue
			}
		}

		// Filter by component
		if component != "" {
			if !strings.Contains(line, component) {
				continue
			}
		}

		filtered = append(filtered, line)
	}

	return filtered
}
